jvm问题排查：

生产web应用程序不可用排查思路

先检查业务日志，如果应用服务已经不能输出日志了，则需要分析jvm日志
top 命令检查服务是cpu过高还是内存使用过高
  内存占用过高
  1.堆内存分配不合理，需要调整jvm相关参数
  2.程序写得不严谨，出现大量对象没有回收，导致内存过高
  
  cpu占用过高
  1.判断当前的业务量是否真为高并发海量访问场景，是则可通过负载均衡进行水平扩展
  2.程序问题,多线程阻塞或是系统资源未释放等
  3.获取GC过于频繁或触发fullGC
  
  内存和cpu占用都高
  二者都很高，一般就是多种问题同时引发
  
根据top命令的初步判断进行细化排查（现在一般都是一台服务器一个应用）
top -Hp {pid} :查看进程的线程使用情况
ps huH p  {pid}  | wc -l ：统计进行的总线程数

// java -Xms32M -Xmx32M -XX:+HeapDumpOnOutOfMemoryError -cp xxx.jar com.test.Test1 :自定义进程的堆内存大小，以及没有内存后可导出jvm日志信息
ps -ef|grep tomcat : 获取到应用的pid进程号

top -Hp {pid} :查看进程的线程使用情况

jstack -l xxx :直接查看线程的堆栈信息，一般用于初步查看（生产的jvm信息一般会很多很大）

jstack -l xxx > 1.txt 可采用导出成其他问价进行排查（一般生产会进行重启服务，所以需要导出事后进行分析）

jmap -dump:file=xxx pid 将进程jvm信息dump为xxx文件

jhat xxx :jhat打开dump的日志信息(jhat -J-Xmx1024m D:/javaDump.hprof 指定内存大小)
通过 http://localhost:7000/ 进行浏览器访问（主要排查对象引用未释放场景）

如果是多线程问题则根据dump的堆栈信息，进行详细排查，主要关注以下信息
    死锁，Deadlock（重点关注） 
    执行中，Runnable   
    等待资源，Waiting on condition（重点关注） 
    等待获取监视器，Waiting on monitor entry（重点关注）
    暂停，Suspended
    对象等待中，Object.wait() 或 TIMED_WAITING
    阻塞，Blocked（重点关注）  
    停止，Parked   

printf "%x\n" xxxx :获取线程id的十六进制码

jstack pid | grep 线程id的十六进制码  ：在线程的堆栈信息中搜索线程的信息，可以定位到当前代码行

常见的jvm问题

1、stackoverflow：

  每当java程序启动一个新的线程时，java虚拟机会为他分配一个栈，java栈以帧为单位保持线程运行状态；当线程调用一个方法是，jvm压入一个新的栈帧到这个线程的栈中，只要这个方法还没返回，这个栈帧就存在。 
  如果方法的嵌套调用层次太多(如递归调用),随着java栈中的帧的增多，最终导致这个线程的栈中的所有栈帧的大小的总和大于-Xss设置的值，而产生生StackOverflowError溢出异常。

2、outofmemory：

    2.1、栈内存溢出

    java程序启动一个新线程时，没有足够的空间为改线程分配java栈，一个线程java栈的大小由-Xss设置决定；JVM则抛出OutOfMemoryError异常。

    2.2、堆内存溢出

    java堆用于存放对象的实例，当需要为对象的实例分配内存时，而堆的占用已经达到了设置的最大值(通过-Xmx)设置最大值，则抛出OutOfMemoryError异常。

    2.3、方法区内存溢出

    方法区用于存放java类的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述等。在类加载器加载class文件到内存中的时候，JVM会提取其中的类信息，并将这些类信息放到方法区中。 
    当需要存储这些类信息，而方法区的内存占用又已经达到最大值（通过-XX:MaxPermSize）；将会抛出OutOfMemoryError异常对于这种情况的测试，基本的思路是运行时产生大量的类去填满方法区，直到溢出。这里需要借助CGLib直接操作字节码运行时，生成了大量的动态类。




jvm分析工具介绍

https://www.cnblogs.com/duanxz/p/4890475.html
一、jdk工具之jps（JVM Process Status Tools）命令使用

二、jdk命令之javah命令(C Header and Stub File Generator)

三、jdk工具之jstack(Java Stack Trace)

四、jdk工具之jstat命令(Java Virtual Machine Statistics Monitoring Tool)

四、jdk工具之jstat命令2(Java Virtual Machine Statistics Monitoring Tool)详解

五、jdk工具之jmap（java memory map）、 mat之四--结合mat对内存泄露的分析

六、jdk工具之jinfo命令(Java Configuration Info)

七、jdk工具之jconsole命令(Java Monitoring and Management Console)

八、jdk工具之JvisualVM、JvisualVM之二--Java程序性能分析工具Java VisualVM

九、jdk工具之jhat命令(Java Heap Analyse Tool)

十、jdk工具之Jdb命令(The Java Debugger)

十一、jdk命令之Jstatd命令(Java Statistics Monitoring Daemon)

十一、jdk命令之Jstatd命令(Java Statistics Monitoring Daemon)

十二、jdk工具之jcmd介绍（堆转储、堆分析、获取系统信息、查看堆外内存）

十三、jdk命令之Java内存之本地内存分析神器：NMT 和 pmap

MAC下载独立MAT内存分析工具

https://blog.csdn.net/mahl1990/article/details/79298616

MAT独立分析工具使用说明 https://blog.51cto.com/wwdhks/2121247
